{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "deployer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "meta",
              "type": "bytes"
            }
          ],
          "internalType": "struct DeployerDiscoverableMetaV2ConstructionConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InitializationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unmeta",
          "type": "bytes"
        }
      ],
      "name": "NotRainMetaV1",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "expectedHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "actualHash",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedMetaHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroImplementationCodeSize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subject",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "meta",
          "type": "bytes"
        }
      ],
      "name": "MetaV1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "clone",
          "type": "address"
        }
      ],
      "name": "NewClone",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "clone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051620008d4380380620008d48339810160408190526200003491620002b4565b7fc95dbb57fc82aaa5d8e58ffb65cff40b4b5c1fdd2d50da43d760cea45ea2304f60001b816200006f828260200151620000c660201b60201c565b60208101516040517fbea766d03fa1efd3f81cc8634d08320bc62bb0ed9234ac59bbaafa5893fb6b1391620000a89133913091620003c2565b60405180910390a18051620000bd906200010d565b505050620004d8565b80516020820120828114620000fd5760405163074fe10f60e41b815260048101849052602481018290526044015b60405180910390fd5b6200010882620001a4565b505050565b60408051600080825260208201818152828401938490526331a66b6560e01b90935291829182916001600160a01b038616916331a66b65916200015591906044820162000431565b6060604051808303816000875af115801562000175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019b919062000468565b50505050505050565b620001af81620001d4565b620001d15780604051630c89984b60e31b8152600401620000f49190620004bc565b50565b6000600882511015620001e957506000919050565b50600801516001600160401b031667ff0a89c674ee78741490565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200023f576200023f62000204565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000270576200027062000204565b604052919050565b6001600160a01b0381168114620001d157600080fd5b60005b83811015620002ab57818101518382015260200162000291565b50506000910152565b60006020808385031215620002c857600080fd5b82516001600160401b0380821115620002e057600080fd5b9084019060408287031215620002f557600080fd5b620002ff6200021a565b82516200030c8162000278565b815282840151828111156200032057600080fd5b80840193505086601f8401126200033657600080fd5b8251828111156200034b576200034b62000204565b6200035f601f8201601f1916860162000245565b925080835287858286010111156200037657600080fd5b62000387818685018787016200028e565b5092830152509392505050565b60008151808452620003ae8160208601602086016200028e565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000620003eb606083018462000394565b95945050505050565b600081518084526020808501945080840160005b83811015620004265781518752958201959082019060010162000408565b509495945050505050565b6060815260006060820152608060208201526000620004546080830185620003f4565b8281036040840152620003eb8185620003f4565b6000806000606084860312156200047e57600080fd5b83516200048b8162000278565b60208501519093506200049e8162000278565b6040850151909250620004b18162000278565b809150509250925092565b602081526000620004d1602083018462000394565b9392505050565b6103ec80620004e86000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630fbe133c14610030575b600080fd5b61004361003e3660046102e8565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff163b6000036100bf576040517ff432283200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100ca8561021c565b6040805133815273ffffffffffffffffffffffffffffffffffffffff888116602083015283168183015290519192507f274b5f356634f32a865af65bdc3d8205939d9413d75e1f367652e4f3b24d0c3a919081900360600190a16040517f439fab910000000000000000000000000000000000000000000000000000000081527fe0e57eda3f08f2a93bbe980d3df7f9c315eac41181f58b865a13d917fe769fc39073ffffffffffffffffffffffffffffffffffffffff83169063439fab919061019a9088908890600401610386565b6020604051808303816000875af11580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906103d3565b14610214576040517f19b991a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b949350505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff81166102e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6000806000604084860312156102fd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461032157600080fd5b9250602084013567ffffffffffffffff8082111561033e57600080fd5b818601915086601f83011261035257600080fd5b81358181111561036157600080fd5b87602082850101111561037357600080fd5b6020830194508093505050509250925092565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082840312156103e557600080fd5b505191905056",
    "sourceMap": "932:1385:30:-:0;;;1011:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;587:66;579:75;;1143:6;1075:46:23;1099:8;1109:6;:11;;;1075:23;;;:46;;:::i;:::-;1188:11;;;;1136:64;;;;;;1143:10;;1179:4;;1136:64;:::i;:::-;;;;;;;;1250:15;;1210:56;;:39;:56::i;:::-;975:298;;1011:146:30;932:1385;;1424:292:22;1538:16;;;;;;1568:28;;;1564:112;;1619:46;;-1:-1:-1;;;1619:46:22;;;;;3082:25:38;;;3123:18;;;3116:34;;;3055:18;;1619:46:22;;;;;;;;1564:112;1685:24;1703:5;1685:17;:24::i;:::-;1506:210;1424:292;;:::o;1308:309:28:-;1513:16;;;1371:26;1513:16;;;;;;1531;;;;;;;;;;-1:-1:-1;;;1460:88:28;;;1371:26;;;;;-1:-1:-1;;;;;1460:48:28;;;;;:88;;1513:16;1460:88;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;1308:309:28:o;1075:155:22:-;1151:19;1164:5;1151:12;:19::i;:::-;1146:78;;1207:5;1193:20;;-1:-1:-1;;;1193:20:22;;;;;;;;:::i;1146:78::-;1075:155;:::o;550:376::-;615:4;650:1;635:5;:12;:16;631:34;;;-1:-1:-1;660:5:22;;550:376;-1:-1:-1;550:376:22:o;631:34::-;-1:-1:-1;846:1:22;835:13;829:20;-1:-1:-1;;;;;825:32:22;667:18:21;883:36:22;;550:376::o;14:127:38:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:256;217:4;211:11;;;249:17;;-1:-1:-1;;;;;281:34:38;;317:22;;;278:62;275:88;;;343:18;;:::i;:::-;379:4;372:24;146:256;:::o;407:275::-;478:2;472:9;543:2;524:13;;-1:-1:-1;;520:27:38;508:40;;-1:-1:-1;;;;;563:34:38;;599:22;;;560:62;557:88;;;625:18;;:::i;:::-;661:2;654:22;407:275;;-1:-1:-1;407:275:38:o;687:131::-;-1:-1:-1;;;;;762:31:38;;752:42;;742:70;;808:1;805;798:12;823:250;908:1;918:113;932:6;929:1;926:13;918:113;;;1008:11;;;1002:18;989:11;;;982:39;954:2;947:10;918:113;;;-1:-1:-1;;1065:1:38;1047:16;;1040:27;823:250::o;1078:1160::-;1211:6;1242:2;1285;1273:9;1264:7;1260:23;1256:32;1253:52;;;1301:1;1298;1291:12;1253:52;1328:16;;-1:-1:-1;;;;;1393:14:38;;;1390:34;;;1420:1;1417;1410:12;1390:34;1443:22;;;;1499:4;1481:16;;;1477:27;1474:47;;;1517:1;1514;1507:12;1474:47;1543:21;;:::i;:::-;1594:2;1588:9;1606:33;1631:7;1606:33;:::i;:::-;1648:22;;1701:11;;;1695:18;1725:16;;;1722:36;;;1754:1;1751;1744:12;1722:36;1785:8;1781:2;1777:17;1767:27;;;1832:7;1825:4;1821:2;1817:13;1813:27;1803:55;;1854:1;1851;1844:12;1803:55;1883:2;1877:9;1905:2;1901;1898:10;1895:36;;;1911:18;;:::i;:::-;1953:53;1996:2;1977:13;;-1:-1:-1;;1973:27:38;1969:36;;1953:53;:::i;:::-;1940:66;;2029:2;2022:5;2015:17;2069:7;2064:2;2059;2055;2051:11;2047:20;2044:33;2041:53;;;2090:1;2087;2080:12;2041:53;2103:67;2167:2;2162;2155:5;2151:14;2146:2;2142;2138:11;2103:67;:::i;:::-;-1:-1:-1;2186:14:38;;;2179:29;-1:-1:-1;2190:5:38;1078:1160;-1:-1:-1;;;1078:1160:38:o;2243:270::-;2284:3;2322:5;2316:12;2349:6;2344:3;2337:19;2365:76;2434:6;2427:4;2422:3;2418:14;2411:4;2404:5;2400:16;2365:76;:::i;:::-;2495:2;2474:15;-1:-1:-1;;2470:29:38;2461:39;;;;2502:4;2457:50;;2243:270;-1:-1:-1;;2243:270:38:o;2518:385::-;2750:1;2746;2741:3;2737:11;2733:19;2725:6;2721:32;2710:9;2703:51;2790:6;2785:2;2774:9;2770:18;2763:34;2833:2;2828;2817:9;2813:18;2806:30;2684:4;2853:44;2893:2;2882:9;2878:18;2870:6;2853:44;:::i;:::-;2845:52;2518:385;-1:-1:-1;;;;;2518:385:38:o;3161:435::-;3214:3;3252:5;3246:12;3279:6;3274:3;3267:19;3305:4;3334:2;3329:3;3325:12;3318:19;;3371:2;3364:5;3360:14;3392:1;3402:169;3416:6;3413:1;3410:13;3402:169;;;3477:13;;3465:26;;3511:12;;;;3546:15;;;;3438:1;3431:9;3402:169;;;-1:-1:-1;3587:3:38;;3161:435;-1:-1:-1;;;;;3161:435:38:o;3601:646::-;3958:2;3947:9;3940:21;3997:1;3992:2;3981:9;3977:18;3970:29;4037:3;4030:4;4019:9;4015:20;4008:33;3921:4;4064:57;4116:3;4105:9;4101:19;4093:6;4064:57;:::i;:::-;4169:9;4161:6;4157:22;4152:2;4141:9;4137:18;4130:50;4197:44;4234:6;4226;4197:44;:::i;4252:572::-;4393:6;4401;4409;4462:2;4450:9;4441:7;4437:23;4433:32;4430:52;;;4478:1;4475;4468:12;4430:52;4510:9;4504:16;4529:31;4554:5;4529:31;:::i;:::-;4629:2;4614:18;;4608:25;4579:5;;-1:-1:-1;4642:33:38;4608:25;4642:33;:::i;:::-;4746:2;4731:18;;4725:25;4694:7;;-1:-1:-1;4759:33:38;4725:25;4759:33;:::i;:::-;4811:7;4801:17;;;4252:572;;;;;:::o;4829:217::-;4976:2;4965:9;4958:21;4939:4;4996:44;5036:2;5025:9;5021:18;5013:6;4996:44;:::i;:::-;4988:52;4829:217;-1:-1:-1;;;4829:217:38:o;:::-;932:1385:30;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630fbe133c14610030575b600080fd5b61004361003e3660046102e8565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008373ffffffffffffffffffffffffffffffffffffffff163b6000036100bf576040517ff432283200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100ca8561021c565b6040805133815273ffffffffffffffffffffffffffffffffffffffff888116602083015283168183015290519192507f274b5f356634f32a865af65bdc3d8205939d9413d75e1f367652e4f3b24d0c3a919081900360600190a16040517f439fab910000000000000000000000000000000000000000000000000000000081527fe0e57eda3f08f2a93bbe980d3df7f9c315eac41181f58b865a13d917fe769fc39073ffffffffffffffffffffffffffffffffffffffff83169063439fab919061019a9088908890600401610386565b6020604051808303816000875af11580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906103d3565b14610214576040517f19b991a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b949350505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff81166102e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6000806000604084860312156102fd57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461032157600080fd5b9250602084013567ffffffffffffffff8082111561033e57600080fd5b818601915086601f83011261035257600080fd5b81358181111561036157600080fd5b87602082850101111561037357600080fd5b6020830194508093505050509250925092565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082840312156103e557600080fd5b505191905056",
    "sourceMap": "932:1385:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1203:1112;;;;;;:::i;:::-;;:::i;:::-;;;983:42:38;971:55;;;953:74;;941:2;926:18;1203:1112:30;;;;;;;;1281:7;1655:14;:26;;;1685:1;1655:31;1651:97;;1709:28;;;;;;;;;;;;;;1651:97;1803:13;1819:28;1832:14;1819:12;:28::i;:::-;2010:43;;;2019:10;1301:34:38;;1250:42;1371:15;;;1366:2;1351:18;;1344:43;1423:15;;1403:18;;;1396:43;2010::30;;1423:15:38;;-1:-1:-1;2010:43:30;;;;;;1228:2:38;2010:43:30;;;2170:36;;;;;191::32;;2170:30:30;;;;;;:36;;2201:4;;;;2170:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;2166:121;;2254:22;;;;;;;;;;;;;;2166:121;2303:5;1203:1112;-1:-1:-1;;;;1203:1112:30:o;973:759:18:-;1030:16;1362:48;1344:14;1338:4;1334:25;1328:4;1324:36;1321:90;1315:4;1308:104;1569:32;1552:14;1546:4;1542:25;1539:63;1533:4;1526:77;1644:4;1638;1635:1;1628:21;1616:33;-1:-1:-1;1676:22:18;;;1668:57;;;;;;;2293:2:38;1668:57:18;;;2275:21:38;2332:2;2312:18;;;2305:30;2371:24;2351:18;;;2344:52;2413:18;;1668:57:18;;;;;;;;973:759;;;:::o;14:788:38:-;93:6;101;109;162:2;150:9;141:7;137:23;133:32;130:52;;;178:1;175;168:12;130:52;217:9;204:23;267:42;260:5;256:54;249:5;246:65;236:93;;325:1;322;315:12;236:93;348:5;-1:-1:-1;404:2:38;389:18;;376:32;427:18;457:14;;;454:34;;;484:1;481;474:12;454:34;522:6;511:9;507:22;497:32;;567:7;560:4;556:2;552:13;548:27;538:55;;589:1;586;579:12;538:55;629:2;616:16;655:2;647:6;644:14;641:34;;;671:1;668;661:12;641:34;716:7;711:2;702:6;698:2;694:15;690:24;687:37;684:57;;;737:1;734;727:12;684:57;768:2;764;760:11;750:21;;790:6;780:16;;;;;14:788;;;;;:::o;1450:447::-;1607:2;1596:9;1589:21;1646:6;1641:2;1630:9;1626:18;1619:34;1703:6;1695;1690:2;1679:9;1675:18;1662:48;1759:1;1730:22;;;1754:2;1726:31;;;1719:42;;;;1813:2;1801:15;;;1818:66;1797:88;1782:104;1778:113;;1450:447;-1:-1:-1;1450:447:38:o;1902:184::-;1972:6;2025:2;2013:9;2004:7;2000:23;1996:32;1993:52;;;2041:1;2038;2031:12;1993:52;-1:-1:-1;2064:16:38;;1902:184;-1:-1:-1;1902:184:38:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "clone(address,bytes)": "0fbe133c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"meta\",\"type\":\"bytes\"}],\"internalType\":\"struct DeployerDiscoverableMetaV2ConstructionConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InitializationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unmeta\",\"type\":\"bytes\"}],\"name\":\"NotRainMetaV1\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expectedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actualHash\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedMetaHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroImplementationCodeSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"meta\",\"type\":\"bytes\"}],\"name\":\"MetaV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"NewClone\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotRainMetaV1(bytes)\":[{\"params\":{\"unmeta\":\"the bytes that are not meta.\"}}],\"UnexpectedMetaHash(bytes32,bytes32)\":[{\"params\":{\"actualHash\":\"The hash of the metadata seen by the `IMetaV1` contract.\",\"expectedHash\":\"The hash expected by the `IMetaV1` contract.\"}}]},\"events\":{\"MetaV1(address,uint256,bytes)\":{\"params\":{\"meta\":\"Rain metadata V1 compliant metadata bytes. https://github.com/rainprotocol/specs/blob/main/metadata-v1.md\",\"sender\":\"The msg.sender.\",\"subject\":\"The entity that the metadata is about. MAY be the address of the emitting contract (as `uint256`) OR anything else. The interpretation of the subject is context specific, so will often be a hash of some data/thing that this metadata is about.\"}},\"NewClone(address,address,address)\":{\"params\":{\"clone\":\"The address of the new proxy contract.\",\"implementation\":\"The reference bytecode to clone as a proxy.\",\"sender\":\"The `msg.sender` that called `clone`.\"}}},\"kind\":\"dev\",\"methods\":{\"clone(address,bytes)\":{\"params\":{\"data\":\"As per `ICloneableV2`.\",\"implementation\":\"The contract to clone.\"},\"returns\":{\"_0\":\"New child contract address.\"}}},\"title\":\"CloneFactory\",\"version\":1},\"userdoc\":{\"errors\":{\"InitializationFailed()\":[{\"notice\":\"Thrown when initialization fails.\"}],\"NotRainMetaV1(bytes)\":[{\"notice\":\"Thrown when some bytes are expected to be rain meta and are not.\"}],\"UnexpectedMetaHash(bytes32,bytes32)\":[{\"notice\":\"Thrown when hashed metadata does NOT match the expected hash.\"}],\"ZeroImplementationCodeSize()\":[{\"notice\":\"Thrown when an implementation has zero code size which is always a mistake.\"}]},\"events\":{\"MetaV1(address,uint256,bytes)\":{\"notice\":\"An onchain wrapper to carry arbitrary Rain metadata. Assigns the sender to the metadata so that tooling can easily drop/ignore data from unknown sources. As metadata is about something, the subject MUST be provided.\"},\"NewClone(address,address,address)\":{\"notice\":\"Emitted upon each `clone`.\"}},\"kind\":\"user\",\"methods\":{\"clone(address,bytes)\":{\"notice\":\"Clones an implementation using a proxy. EIP1167 proxy is recommended but the exact cloning procedure is not specified by this interface. The factory MUST call `ICloneableV2.initialize` atomically with the cloning process and MUST NOT call any other functions on the cloned proxy before `initialize` completes successfully. The factory MUST ONLY consider the clone to be successfully created if `initialize` returns the keccak256 hash of the string \\\"ICloneableV2.initialize\\\". MUST emit `NewClone` with the implementation and clone address.\"}},\"notice\":\"A fairly minimal implementation of `ICloneableFactoryV2` and `DeployerDiscoverableMetaV2` that uses Open Zeppelin `Clones` to create EIP1167 clones of a reference bytecode. The reference bytecode MUST implement `ICloneableV2`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/concrete/CloneFactory.sol\":\"CloneFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":bytecode/=lib/rain.interpreter/src/lib/bytecode/\",\":caller/=lib/rain.interpreter/src/lib/caller/\",\":compile/=lib/rain.interpreter/src/lib/compile/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eval/=lib/rain.interpreter/src/lib/eval/\",\":extern/=lib/rain.interpreter/src/lib/extern/\",\":forge-std/=lib/forge-std/src/\",\":integrity/=lib/rain.interpreter/src/lib/integrity/\",\":ns/=lib/rain.interpreter/src/lib/ns/\",\":op/=lib/rain.interpreter/src/lib/op/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":parse/=lib/rain.interpreter/src/lib/parse/\",\":prb-math/=lib/rain.interpreter/lib/prb-math/src/\",\":prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/\",\":rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/\",\":rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/\",\":rain.extrospection/=lib/rain.extrospection/\",\":rain.interpreter/=lib/rain.interpreter/\",\":rain.lib.hash/=lib/rain.interpreter/lib/rain.lib.memkv/lib/rain.lib.hash/src/\",\":rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/\",\":rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/\",\":rain.math.fixedpoint/=lib/rain.interpreter/lib/rain.math.fixedpoint/src/\",\":rain.math.saturating/=lib/rain.interpreter/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.metadata/=lib/rain.interpreter/lib/rain.metadata/src/\",\":rain.solmem/=lib/rain.extrospection/lib/rain.solmem/src/\",\":sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/\",\":state/=lib/rain.interpreter/src/lib/state/\",\":uniswap/=lib/rain.interpreter/src/lib/uniswap/\",\":v2-core/=lib/rain.interpreter/lib/v2-core/contracts/\",\":v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1306add0c9388918d04c45f6acae3551f019ebf8a77e6cc1c0958316ce1c1eb\",\"dweb:/ipfs/QmR4KHkcfP65RfZtH8TcC7rSdCoWk2Dnog6fhzzjLad8Aa\"]},\"lib/rain.interpreter/lib/rain.metadata/src/IMetaV1.sol\":{\"keccak256\":\"0xd1959040fcc89be7a4dc8c9c193e4e5a78b84b05848b86c54d39c3d717ad1843\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://7d3cba2279a6b8912f783430eef89c4a6482a489632ead7e2a3594d2162fa2b3\",\"dweb:/ipfs/QmfJFn72vcnq4LXpeBs9PWuDRzJSr58uVeDVjWpxjMHFWs\"]},\"lib/rain.interpreter/lib/rain.metadata/src/LibMeta.sol\":{\"keccak256\":\"0x04665ba6364cc67050b2a245daa780c39039dd51653f7b2029910f242f5dd285\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://4341f3462120c37c832c03c6c9a0d52a100708fad713ced970f09747badd9d6d\",\"dweb:/ipfs/QmUGovuLTuTmCSTvYWc6SehzyoYAzVsAnPBNmE3hmRDAQU\"]},\"lib/rain.interpreter/src/abstract/DeployerDiscoverableMetaV2.sol\":{\"keccak256\":\"0x3a74582510521381a9bd2732847be9170fd58fc5baf257917854f35823cd94db\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://233812d35b959b522281af216123f7cc3c900342273e337cc9ba4418f655a78a\",\"dweb:/ipfs/QmZjZtdUbBzA55VSSKASr3fnmK1CZ36SY8LoyAYsFZ8gwA\"]},\"lib/rain.interpreter/src/interface/IExpressionDeployerV1.sol\":{\"keccak256\":\"0x42d4d91cc62778967ca5f1bb2e7b2c97ca2de2c49518bc8a08a0b50275074ab6\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://6f461a0c0f65a514799200a64bc0e9d926abe4e0bba0c4e2ca0e3d6a04677768\",\"dweb:/ipfs/QmeUggk58ypM3721672wdupquFM8W9VnY3qpn8swKoeLhA\"]},\"lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol\":{\"keccak256\":\"0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5\",\"dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y\"]},\"lib/rain.interpreter/src/interface/IInterpreterV1.sol\":{\"keccak256\":\"0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00\",\"dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9\"]},\"lib/rain.interpreter/src/interface/unstable/IExpressionDeployerV2.sol\":{\"keccak256\":\"0x7bbcf9d3689bdecdc58537e5185f0b88e8d4e91a295f5124f19779609f19f219\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://ccdcba71f76f2a730685f956f1854355751a3c9b4caef9569e2a6d8acc8747a5\",\"dweb:/ipfs/QmQrWgCnxd9aGEHhmFTPkA8E3GVsKuwDhe2UQ5WyfA5LSA\"]},\"lib/rain.interpreter/src/lib/caller/LibDeployerDiscoverable.sol\":{\"keccak256\":\"0x80a4169a009519f7e94ce4416c9f4eb94b0cbf96f8e4c3f4f5ec8d65e59ad085\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://bc915a321a3913fdee0a8eadcc263c6a8d2425c3517da5107d3a4177789199eb\",\"dweb:/ipfs/QmYJAQepVmeHDTZRCAAcEY7J7ANikvH3pnS6eETf5gnVrG\"]},\"src/concrete/CloneFactory.sol\":{\"keccak256\":\"0x0548c5309c01dc971f8cabef2fa745130b65780c7f7772cfdb118b8c0cd0cce8\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://212fd81eed049d97355f7c29c98e2705daaeb29e77c99d4ce4837912f7006299\",\"dweb:/ipfs/QmV6iLc3p7Au46rLddUZrBqAbMRRsr1tPee4RvY9Mx7Cdn\"]},\"src/interface/ICloneableFactoryV2.sol\":{\"keccak256\":\"0xc25b2884c91b31d814531ba801d702cbe8ca6f98b78199e6fe1fb8664547dbfb\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://bf2b74e4311d095acb0b033904d94cbde3cda965eac6428d5a864054acff6910\",\"dweb:/ipfs/QmQqh77n9o3Vt9f5aVqSWxygyVE65ygVE4oTCrD4GvjcZ9\"]},\"src/interface/ICloneableV2.sol\":{\"keccak256\":\"0xbc1ceff073c177b6a0765abc20e897074b45cf620e6196a1d1c52f935d217a80\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://fd2bbdded11b1d41ee37c03e617b17d12dbdd8a2afebc17a91f463db296cb234\",\"dweb:/ipfs/QmWTtnexF9X6G12nEWPcmcsDVTuaYHmWKwUgJTvcak8pYP\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct DeployerDiscoverableMetaV2ConstructionConfig",
              "name": "config",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "deployer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "meta",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InitializationFailed"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "unmeta",
              "type": "bytes"
            }
          ],
          "type": "error",
          "name": "NotRainMetaV1"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "expectedHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "actualHash",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "UnexpectedMetaHash"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ZeroImplementationCodeSize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "subject",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "meta",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MetaV1",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "clone",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "NewClone",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "clone",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "clone(address,bytes)": {
            "params": {
              "data": "As per `ICloneableV2`.",
              "implementation": "The contract to clone."
            },
            "returns": {
              "_0": "New child contract address."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "clone(address,bytes)": {
            "notice": "Clones an implementation using a proxy. EIP1167 proxy is recommended but the exact cloning procedure is not specified by this interface. The factory MUST call `ICloneableV2.initialize` atomically with the cloning process and MUST NOT call any other functions on the cloned proxy before `initialize` completes successfully. The factory MUST ONLY consider the clone to be successfully created if `initialize` returns the keccak256 hash of the string \"ICloneableV2.initialize\". MUST emit `NewClone` with the implementation and clone address."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
        "bytecode/=lib/rain.interpreter/src/lib/bytecode/",
        "caller/=lib/rain.interpreter/src/lib/caller/",
        "compile/=lib/rain.interpreter/src/lib/compile/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "eval/=lib/rain.interpreter/src/lib/eval/",
        "extern/=lib/rain.interpreter/src/lib/extern/",
        "forge-std/=lib/forge-std/src/",
        "integrity/=lib/rain.interpreter/src/lib/integrity/",
        "ns/=lib/rain.interpreter/src/lib/ns/",
        "op/=lib/rain.interpreter/src/lib/op/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "parse/=lib/rain.interpreter/src/lib/parse/",
        "prb-math/=lib/rain.interpreter/lib/prb-math/src/",
        "prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/",
        "rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/",
        "rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/",
        "rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/",
        "rain.extrospection/=lib/rain.extrospection/",
        "rain.interpreter/=lib/rain.interpreter/",
        "rain.lib.hash/=lib/rain.interpreter/lib/rain.lib.memkv/lib/rain.lib.hash/src/",
        "rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/",
        "rain.lib.typecast/=lib/rain.interpreter/lib/rain.lib.typecast/src/",
        "rain.math.fixedpoint/=lib/rain.interpreter/lib/rain.math.fixedpoint/src/",
        "rain.math.saturating/=lib/rain.interpreter/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/",
        "rain.metadata/=lib/rain.interpreter/lib/rain.metadata/src/",
        "rain.solmem/=lib/rain.extrospection/lib/rain.solmem/src/",
        "sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/",
        "state/=lib/rain.interpreter/src/lib/state/",
        "uniswap/=lib/rain.interpreter/src/lib/uniswap/",
        "v2-core/=lib/rain.interpreter/lib/v2-core/contracts/",
        "v2-periphery/=lib/rain.interpreter/lib/v2-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 100000
      },
      "metadata": {
        "bytecodeHash": "none",
        "appendCBOR": false
      },
      "compilationTarget": {
        "src/concrete/CloneFactory.sol": "CloneFactory"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
        "keccak256": "0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999",
        "urls": [
          "bzz-raw://e1306add0c9388918d04c45f6acae3551f019ebf8a77e6cc1c0958316ce1c1eb",
          "dweb:/ipfs/QmR4KHkcfP65RfZtH8TcC7rSdCoWk2Dnog6fhzzjLad8Aa"
        ],
        "license": "MIT"
      },
      "lib/rain.interpreter/lib/rain.metadata/src/IMetaV1.sol": {
        "keccak256": "0xd1959040fcc89be7a4dc8c9c193e4e5a78b84b05848b86c54d39c3d717ad1843",
        "urls": [
          "bzz-raw://7d3cba2279a6b8912f783430eef89c4a6482a489632ead7e2a3594d2162fa2b3",
          "dweb:/ipfs/QmfJFn72vcnq4LXpeBs9PWuDRzJSr58uVeDVjWpxjMHFWs"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/lib/rain.metadata/src/LibMeta.sol": {
        "keccak256": "0x04665ba6364cc67050b2a245daa780c39039dd51653f7b2029910f242f5dd285",
        "urls": [
          "bzz-raw://4341f3462120c37c832c03c6c9a0d52a100708fad713ced970f09747badd9d6d",
          "dweb:/ipfs/QmUGovuLTuTmCSTvYWc6SehzyoYAzVsAnPBNmE3hmRDAQU"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/abstract/DeployerDiscoverableMetaV2.sol": {
        "keccak256": "0x3a74582510521381a9bd2732847be9170fd58fc5baf257917854f35823cd94db",
        "urls": [
          "bzz-raw://233812d35b959b522281af216123f7cc3c900342273e337cc9ba4418f655a78a",
          "dweb:/ipfs/QmZjZtdUbBzA55VSSKASr3fnmK1CZ36SY8LoyAYsFZ8gwA"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/IExpressionDeployerV1.sol": {
        "keccak256": "0x42d4d91cc62778967ca5f1bb2e7b2c97ca2de2c49518bc8a08a0b50275074ab6",
        "urls": [
          "bzz-raw://6f461a0c0f65a514799200a64bc0e9d926abe4e0bba0c4e2ca0e3d6a04677768",
          "dweb:/ipfs/QmeUggk58ypM3721672wdupquFM8W9VnY3qpn8swKoeLhA"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/IInterpreterStoreV1.sol": {
        "keccak256": "0xbd9baa8cd30406576f876a76f1c08396561ba93131741af338f63e2414e20619",
        "urls": [
          "bzz-raw://30bb6f09d8b8f27f77e6c44591c4f2070286a91dad202043cf2351ae802e3df5",
          "dweb:/ipfs/QmRz5pfzf5w84iNmKaYYbqP8oQywzc5xbd3xzKmxgFyf9y"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/IInterpreterV1.sol": {
        "keccak256": "0xebde08ca2e1c25fc733e0bb8867598715f8ba79772f86db1c8960ad7d68a5293",
        "urls": [
          "bzz-raw://b93fb28a09aeea4afe7f0d4afc67354c0fa538e5a9b274b0c5f10ed1dd6b6b00",
          "dweb:/ipfs/QmatNhoHRSJ1ZvoCNo61YMt9jb1vvEkWy3mkcoPkB4FFA9"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/interface/unstable/IExpressionDeployerV2.sol": {
        "keccak256": "0x7bbcf9d3689bdecdc58537e5185f0b88e8d4e91a295f5124f19779609f19f219",
        "urls": [
          "bzz-raw://ccdcba71f76f2a730685f956f1854355751a3c9b4caef9569e2a6d8acc8747a5",
          "dweb:/ipfs/QmQrWgCnxd9aGEHhmFTPkA8E3GVsKuwDhe2UQ5WyfA5LSA"
        ],
        "license": "CAL"
      },
      "lib/rain.interpreter/src/lib/caller/LibDeployerDiscoverable.sol": {
        "keccak256": "0x80a4169a009519f7e94ce4416c9f4eb94b0cbf96f8e4c3f4f5ec8d65e59ad085",
        "urls": [
          "bzz-raw://bc915a321a3913fdee0a8eadcc263c6a8d2425c3517da5107d3a4177789199eb",
          "dweb:/ipfs/QmYJAQepVmeHDTZRCAAcEY7J7ANikvH3pnS6eETf5gnVrG"
        ],
        "license": "CAL"
      },
      "src/concrete/CloneFactory.sol": {
        "keccak256": "0x0548c5309c01dc971f8cabef2fa745130b65780c7f7772cfdb118b8c0cd0cce8",
        "urls": [
          "bzz-raw://212fd81eed049d97355f7c29c98e2705daaeb29e77c99d4ce4837912f7006299",
          "dweb:/ipfs/QmV6iLc3p7Au46rLddUZrBqAbMRRsr1tPee4RvY9Mx7Cdn"
        ],
        "license": "CAL"
      },
      "src/interface/ICloneableFactoryV2.sol": {
        "keccak256": "0xc25b2884c91b31d814531ba801d702cbe8ca6f98b78199e6fe1fb8664547dbfb",
        "urls": [
          "bzz-raw://bf2b74e4311d095acb0b033904d94cbde3cda965eac6428d5a864054acff6910",
          "dweb:/ipfs/QmQqh77n9o3Vt9f5aVqSWxygyVE65ygVE4oTCrD4GvjcZ9"
        ],
        "license": "CAL"
      },
      "src/interface/ICloneableV2.sol": {
        "keccak256": "0xbc1ceff073c177b6a0765abc20e897074b45cf620e6196a1d1c52f935d217a80",
        "urls": [
          "bzz-raw://fd2bbdded11b1d41ee37c03e617b17d12dbdd8a2afebc17a91f463db296cb234",
          "dweb:/ipfs/QmWTtnexF9X6G12nEWPcmcsDVTuaYHmWKwUgJTvcak8pYP"
        ],
        "license": "CAL"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/concrete/CloneFactory.sol",
    "id": 29310,
    "exportedSymbols": {
      "CLONE_FACTORY_META_HASH": [
        29242
      ],
      "CloneFactory": [
        29309
      ],
      "Clones": [
        28505
      ],
      "DEFAULT_STATE_NAMESPACE": [
        28994
      ],
      "DeployerDiscoverableMetaV2": [
        28896
      ],
      "DeployerDiscoverableMetaV2ConstructionConfig": [
        28851
      ],
      "EncodedDispatch": [
        28982
      ],
      "FullyQualifiedNamespace": [
        28943
      ],
      "ICLONEABLE_V2_SUCCESS": [
        29340
      ],
      "ICloneableFactoryV2": [
        29332
      ],
      "ICloneableV2": [
        29353
      ],
      "IERC1820_NAME_IEXPRESSION_DEPLOYER_V1": [
        28902
      ],
      "IERC1820_NAME_IEXPRESSION_DEPLOYER_V2": [
        29031
      ],
      "IExpressionDeployerV1": [
        28938
      ],
      "IExpressionDeployerV2": [
        29066
      ],
      "IInterpreterStoreV1": [
        28975
      ],
      "IInterpreterV1": [
        29025
      ],
      "IMetaV1": [
        28757
      ],
      "InitializationFailed": [
        29235
      ],
      "LibDeployerDiscoverable": [
        29156
      ],
      "LibMeta": [
        28841
      ],
      "META_MAGIC_NUMBER_V1": [
        28746
      ],
      "NO_STORE": [
        28952
      ],
      "NotRainMetaV1": [
        28742
      ],
      "Operand": [
        28986
      ],
      "SourceIndex": [
        28980
      ],
      "StateNamespace": [
        28984
      ],
      "UnexpectedMetaHash": [
        28737
      ],
      "ZeroImplementationCodeSize": [
        29232
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2286:30",
    "nodes": [
      {
        "id": 29224,
        "nodeType": "PragmaDirective",
        "src": "32:24:30",
        "nodes": [],
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 29225,
        "nodeType": "ImportDirective",
        "src": "58:39:30",
        "nodes": [],
        "absolutePath": "src/interface/ICloneableV2.sol",
        "file": "../interface/ICloneableV2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29310,
        "sourceUnit": 29354,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29226,
        "nodeType": "ImportDirective",
        "src": "98:46:30",
        "nodes": [],
        "absolutePath": "src/interface/ICloneableFactoryV2.sol",
        "file": "../interface/ICloneableFactoryV2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29310,
        "sourceUnit": 29333,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29227,
        "nodeType": "ImportDirective",
        "src": "145:70:30",
        "nodes": [],
        "absolutePath": "lib/rain.interpreter/src/abstract/DeployerDiscoverableMetaV2.sol",
        "file": "rain.interpreter/src/abstract/DeployerDiscoverableMetaV2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29310,
        "sourceUnit": 28897,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 29229,
        "nodeType": "ImportDirective",
        "src": "216:73:30",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
        "file": "openzeppelin-contracts/contracts/proxy/Clones.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29310,
        "sourceUnit": 28506,
        "symbolAliases": [
          {
            "foreign": {
              "id": 29228,
              "name": "Clones",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 28505,
              "src": "224:6:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 29232,
        "nodeType": "ErrorDefinition",
        "src": "371:35:30",
        "nodes": [],
        "documentation": {
          "id": 29230,
          "nodeType": "StructuredDocumentation",
          "src": "291:80:30",
          "text": "Thrown when an implementation has zero code size which is always a mistake."
        },
        "errorSelector": "f4322832",
        "name": "ZeroImplementationCodeSize",
        "nameLocation": "377:26:30",
        "parameters": {
          "id": 29231,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "403:2:30"
        }
      },
      {
        "id": 29235,
        "nodeType": "ErrorDefinition",
        "src": "446:29:30",
        "nodes": [],
        "documentation": {
          "id": 29233,
          "nodeType": "StructuredDocumentation",
          "src": "408:38:30",
          "text": "Thrown when initialization fails."
        },
        "errorSelector": "19b991a8",
        "name": "InitializationFailed",
        "nameLocation": "452:20:30",
        "parameters": {
          "id": 29234,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "472:2:30"
        }
      },
      {
        "id": 29242,
        "nodeType": "VariableDeclaration",
        "src": "536:118:30",
        "nodes": [],
        "constant": true,
        "mutability": "constant",
        "name": "CLONE_FACTORY_META_HASH",
        "nameLocation": "553:23:30",
        "scope": 29310,
        "stateVariable": false,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_bytes32",
          "typeString": "bytes32"
        },
        "typeName": {
          "id": 29237,
          "name": "bytes32",
          "nodeType": "ElementaryTypeName",
          "src": "536:7:30",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        },
        "value": {
          "arguments": [
            {
              "hexValue": "307863393564626235376663383261616135643865353866666236356366663430623462356331666464326435306461343364373630636561343565613233303466",
              "id": 29240,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "587:66:30",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_91080492340935594302320268214299063477910170717649689505115405299280234295375_by_1",
                "typeString": "int_const 9108...(69 digits omitted)...5375"
              },
              "value": "0xc95dbb57fc82aaa5d8e58ffb65cff40b4b5c1fdd2d50da43d760cea45ea2304f"
            }
          ],
          "expression": {
            "argumentTypes": [
              {
                "typeIdentifier": "t_rational_91080492340935594302320268214299063477910170717649689505115405299280234295375_by_1",
                "typeString": "int_const 9108...(69 digits omitted)...5375"
              }
            ],
            "id": 29239,
            "isConstant": false,
            "isLValue": false,
            "isPure": true,
            "lValueRequested": false,
            "nodeType": "ElementaryTypeNameExpression",
            "src": "579:7:30",
            "typeDescriptions": {
              "typeIdentifier": "t_type$_t_bytes32_$",
              "typeString": "type(bytes32)"
            },
            "typeName": {
              "id": 29238,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "579:7:30",
              "typeDescriptions": {}
            }
          },
          "id": 29241,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "typeConversion",
          "lValueRequested": false,
          "nameLocations": [],
          "names": [],
          "nodeType": "FunctionCall",
          "src": "579:75:30",
          "tryCall": false,
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          }
        },
        "visibility": "internal"
      },
      {
        "id": 29309,
        "nodeType": "ContractDefinition",
        "src": "932:1385:30",
        "nodes": [
          {
            "id": 29258,
            "nodeType": "FunctionDefinition",
            "src": "1011:146:30",
            "nodes": [],
            "body": {
              "id": 29257,
              "nodeType": "Block",
              "src": "1155:2:30",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 29253,
                    "name": "CLONE_FACTORY_META_HASH",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 29242,
                    "src": "1118:23:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  {
                    "id": 29254,
                    "name": "config",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 29250,
                    "src": "1143:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DeployerDiscoverableMetaV2ConstructionConfig_$28851_memory_ptr",
                      "typeString": "struct DeployerDiscoverableMetaV2ConstructionConfig memory"
                    }
                  }
                ],
                "id": 29255,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 29252,
                  "name": "DeployerDiscoverableMetaV2",
                  "nameLocations": [
                    "1091:26:30"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28896,
                  "src": "1091:26:30"
                },
                "nodeType": "ModifierInvocation",
                "src": "1091:59:30"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 29251,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29250,
                  "mutability": "mutable",
                  "name": "config",
                  "nameLocation": "1075:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 29258,
                  "src": "1023:58:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DeployerDiscoverableMetaV2ConstructionConfig_$28851_memory_ptr",
                    "typeString": "struct DeployerDiscoverableMetaV2ConstructionConfig"
                  },
                  "typeName": {
                    "id": 29249,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 29248,
                      "name": "DeployerDiscoverableMetaV2ConstructionConfig",
                      "nameLocations": [
                        "1023:44:30"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 28851,
                      "src": "1023:44:30"
                    },
                    "referencedDeclaration": 28851,
                    "src": "1023:44:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DeployerDiscoverableMetaV2ConstructionConfig_$28851_storage_ptr",
                      "typeString": "struct DeployerDiscoverableMetaV2ConstructionConfig"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1022:60:30"
            },
            "returnParameters": {
              "id": 29256,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1155:0:30"
            },
            "scope": 29309,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 29308,
            "nodeType": "FunctionDefinition",
            "src": "1203:1112:30",
            "nodes": [],
            "body": {
              "id": 29307,
              "nodeType": "Block",
              "src": "1290:1025:30",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 29272,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "expression": {
                          "id": 29268,
                          "name": "implementation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29261,
                          "src": "1655:14:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 29269,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1670:4:30",
                        "memberName": "code",
                        "nodeType": "MemberAccess",
                        "src": "1655:19:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 29270,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1675:6:30",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1655:26:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 29271,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1685:1:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1655:31:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 29277,
                  "nodeType": "IfStatement",
                  "src": "1651:97:30",
                  "trueBody": {
                    "id": 29276,
                    "nodeType": "Block",
                    "src": "1688:60:30",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 29273,
                            "name": "ZeroImplementationCodeSize",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29232,
                            "src": "1709:26:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 29274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1709:28:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 29275,
                        "nodeType": "RevertStatement",
                        "src": "1702:35:30"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    29279
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 29279,
                      "mutability": "mutable",
                      "name": "child",
                      "nameLocation": "1811:5:30",
                      "nodeType": "VariableDeclaration",
                      "scope": 29307,
                      "src": "1803:13:30",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 29278,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1803:7:30",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 29284,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 29282,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29261,
                        "src": "1832:14:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 29280,
                        "name": "Clones",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28505,
                        "src": "1819:6:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Clones_$28505_$",
                          "typeString": "type(library Clones)"
                        }
                      },
                      "id": 29281,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1826:5:30",
                      "memberName": "clone",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28448,
                      "src": "1819:12:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) returns (address)"
                      }
                    },
                    "id": 29283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1819:28:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1803:44:30"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 29286,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2019:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 29287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2023:6:30",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2019:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 29288,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29261,
                        "src": "2031:14:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 29289,
                        "name": "child",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29279,
                        "src": "2047:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 29285,
                      "name": "NewClone",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29321,
                      "src": "2010:8:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address,address)"
                      }
                    },
                    "id": 29290,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2010:43:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29291,
                  "nodeType": "EmitStatement",
                  "src": "2005:48:30"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 29299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 29296,
                          "name": "data",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29263,
                          "src": "2201:4:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 29293,
                              "name": "child",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 29279,
                              "src": "2183:5:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 29292,
                            "name": "ICloneableV2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29353,
                            "src": "2170:12:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ICloneableV2_$29353_$",
                              "typeString": "type(contract ICloneableV2)"
                            }
                          },
                          "id": 29294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2170:19:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ICloneableV2_$29353",
                            "typeString": "contract ICloneableV2"
                          }
                        },
                        "id": 29295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2190:10:30",
                        "memberName": "initialize",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 29352,
                        "src": "2170:30:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) external returns (bytes32)"
                        }
                      },
                      "id": 29297,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2170:36:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 29298,
                      "name": "ICLONEABLE_V2_SUCCESS",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29340,
                      "src": "2210:21:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2170:61:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 29304,
                  "nodeType": "IfStatement",
                  "src": "2166:121:30",
                  "trueBody": {
                    "id": 29303,
                    "nodeType": "Block",
                    "src": "2233:54:30",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 29300,
                            "name": "InitializationFailed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 29235,
                            "src": "2254:20:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 29301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2254:22:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 29302,
                        "nodeType": "RevertStatement",
                        "src": "2247:29:30"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 29305,
                    "name": "child",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 29279,
                    "src": "2303:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 29267,
                  "id": 29306,
                  "nodeType": "Return",
                  "src": "2296:12:30"
                }
              ]
            },
            "baseFunctions": [
              29331
            ],
            "documentation": {
              "id": 29259,
              "nodeType": "StructuredDocumentation",
              "src": "1163:35:30",
              "text": "@inheritdoc ICloneableFactoryV2"
            },
            "functionSelector": "0fbe133c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "clone",
            "nameLocation": "1212:5:30",
            "parameters": {
              "id": 29264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29261,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "1226:14:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 29308,
                  "src": "1218:22:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29260,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1218:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 29263,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1257:4:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 29308,
                  "src": "1242:19:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 29262,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1242:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1217:45:30"
            },
            "returnParameters": {
              "id": 29267,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29266,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 29308,
                  "src": "1281:7:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29265,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1281:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1280:9:30"
            },
            "scope": 29309,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 29244,
              "name": "ICloneableFactoryV2",
              "nameLocations": [
                "957:19:30"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29332,
              "src": "957:19:30"
            },
            "id": 29245,
            "nodeType": "InheritanceSpecifier",
            "src": "957:19:30"
          },
          {
            "baseName": {
              "id": 29246,
              "name": "DeployerDiscoverableMetaV2",
              "nameLocations": [
                "978:26:30"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28896,
              "src": "978:26:30"
            },
            "id": 29247,
            "nodeType": "InheritanceSpecifier",
            "src": "978:26:30"
          }
        ],
        "canonicalName": "CloneFactory",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 29243,
          "nodeType": "StructuredDocumentation",
          "src": "657:275:30",
          "text": "@title CloneFactory\n @notice A fairly minimal implementation of `ICloneableFactoryV2` and\n `DeployerDiscoverableMetaV2` that uses Open Zeppelin `Clones` to create\n EIP1167 clones of a reference bytecode. The reference bytecode MUST implement\n `ICloneableV2`."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          29309,
          28896,
          28757,
          29332
        ],
        "name": "CloneFactory",
        "nameLocation": "941:12:30",
        "scope": 29310,
        "usedErrors": [
          28737,
          28742,
          29232,
          29235
        ]
      }
    ],
    "license": "CAL"
  },
  "id": 30
}